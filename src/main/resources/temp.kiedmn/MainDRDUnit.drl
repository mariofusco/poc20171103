/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package temp.kiedmn;

query requires( DRGNode x, DRGNode y )
  InformationRequirement( x, y; )
  or
  ( InformationRequirement( x, i; ) and requires( i, y; ) )
end

rule "Find all requirements"
when
    Requested( $req: step )
    requires( $req, $dep; )
then
    insert(new IntermediateStep($dep));
end

rule "Suggest next logical step, IntermediateStep"
when
    IntermediateStep( $req: step )
    not( Computed( step == $req ) ) 
    forall ( InformationRequirement( decision == $req, $dep : requires ) Computed( step == $dep ) )
then
    insertLogical(new ToBeEvaluated($req));
end

rule "Suggest next logical step, Requested"
when
    Requested( $req: step )
    not( Computed( step == $req ) ) 
    forall ( InformationRequirement( decision == $req, $dep : requires ) Computed( step == $dep ) )
then
    insertLogical(new ToBeEvaluated($req));
end